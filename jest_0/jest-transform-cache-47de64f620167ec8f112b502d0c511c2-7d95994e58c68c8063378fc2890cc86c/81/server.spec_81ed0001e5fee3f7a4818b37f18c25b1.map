{"version":3,"sources":["server.spec.js"],"names":["request","require","app","Event","event","Sequelize","Op","userEntersRoom","userCommentsInARoom","userHighFivesAnotherUser","userLeavesRoom","describe","it","done","post","send","expect","end","err","res","toBeNull","body","toHaveProperty"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAE,QAAF,CAAnB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,kBAAD,CAAP,CAA4BG,KAA1C;;AACA,MAAMC,SAAS,GAAGJ,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMK,EAAE,GAAGD,SAAS,CAACC,EAArB;AAEA;;;;AAGA,MAAMC,cAAc,GAAG;AAAC,UAAQ,sBAAT;AAAiC,UAAQ,KAAzC;AAAgD,UAAQ;AAAxD,CAAvB;AAEA,MAAMC,mBAAmB,GAAG;AAAC,UAAQ,sBAAT;AAAiC,UAAQ,KAAzC;AAAgD,UAAQ,SAAxD;AAAmE,aAAW;AAA9E,CAA5B;AAEA,MAAMC,wBAAwB,GAAG;AAAC,UAAQ,sBAAT;AAAiC,UAAQ,OAAzC;AAAkD,UAAQ,UAA1D;AAAsE,eAAa;AAAnF,CAAjC;AAEA,MAAMC,cAAc,GAAG;AAAC,UAAQ,sBAAT;AAAiC,UAAQ,KAAzC;AAAgD,UAAQ;AAAxD,CAAvB;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAE,iBAAF,EAAqB,MAAM;AACjCC,IAAAA,EAAE,CAAE,8DAAF,EAAmEC,IAAD,IAAU;AAC5Eb,MAAAA,OAAO,CAACE,GAAD,CAAP,CACGY,IADH,CACQ,SADR,EAEGC,IAFH,CAEQR,cAFR,EAGGS,MAHH,CAGU,GAHV,EAIGC,GAJH,CAIO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBH,QAAAA,MAAM,CAACE,GAAD,CAAN,CAAYE,QAAZ;AACAJ,QAAAA,MAAM,CAACG,GAAG,CAACE,IAAL,CAAN,CAAiBC,cAAjB,CAAgC,QAAhC,EAA0C,IAA1C;AACAT,QAAAA,IAAI;AACL,OARH;AASD,KAVC,CAAF,CADiC,CAYjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GA7CO,CAAR,CAD2B,CAgD3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAnGO,CAAR","sourcesContent":["const request = require('supertest');\nconst app = require ('../app');\nconst Event = require('../server/models').event;\nconst Sequelize = require('sequelize');\nconst Op = Sequelize.Op;\n\n/*\nSupported POST bodies\n*/\nconst userEntersRoom = {\"date\": \"1985­10­26T09:00:00Z\", \"user\": \"Doc\", \"type\": \"enter\"};\n\nconst userCommentsInARoom = {\"date\": \"1985­10­27T09:01:00Z\", \"user\": \"Doc\", \"type\": \"comment\", \"message\": \"I love plutonium\"};\n\nconst userHighFivesAnotherUser = {\"date\": \"1985­10­28T09:02:00Z\", \"user\": \"Marty\", \"type\": \"highfive\", \"otheruser\": \"Doc\"};\n\nconst userLeavesRoom = {\"date\": \"1985­10­29T09:03:00Z\", \"user\": \"Doc\", \"type\": \"leave\"};\n\ndescribe('Events API', () => {\n  describe( 'creating events', () => {\n    it( 'the events route responds to a POST with a user enters event', (done) => {\n      request(app)\n        .post('/events')\n        .send(userEntersRoom)\n        .expect(200)\n        .end((err, res) => {\n          expect(err).toBeNull();\n          expect(res.body).toHaveProperty('status', 'ok');\n          done();\n        });\n    });\n    // it( 'the events route responds to a POST with a user comments event', (done) => {\n    //   request(app)\n    //     .post('/events')\n    //     .send(userCommentsInARoom)\n    //     .expect(200)\n    //     .end((err, res) => {\n    //       expect(err).toBeNull();\n    //       expect(res.body).toHaveProperty('status', 'ok');\n    //       done();\n    //     });\n    // });\n    // it( 'the events route responds to a POST with a user high five event', (done) => {\n    //   request(app)\n    //     .post('/events')\n    //     .send(userHighFivesAnotherUser)\n    //     .expect(200)\n    //     .end((err, res) => {\n    //       expect(err).toBeNull();\n    //       expect(res.body).toHaveProperty('status', 'ok');\n    //       done();\n    //     });\n    // });\n    // it( 'the events route responds to a POST with a user leaves event', (done) => {\n    //   request(app)\n    //     .post('/events')\n    //     .send(userLeavesRoom)\n    //     .expect(200)\n    //     .end((err, res) => {\n    //       expect(err).toBeNull();\n    //       expect(res.body).toHaveProperty('status', 'ok');\n    //       done();\n    //     });\n    // });\n  });\n\n  // describe( 'listing events', () => {\n  //   it( 'the events route will get a listing of events', (done) => {\n  //     Event\n  //       .findAll({\n  //         where: {\n  //           date: {\n  //             [Op.lt]: '1985­10­26T09:00:00Z',\n  //             [Op.gt]: '1985­10­29T09:03:00Z'\n  //           }\n  //         }\n  //       })\n  //       .then((events) => {\n  //         request(app)\n  //           .get('/events')\n  //           .send('from=1985­10­26T09:00:00Z&to=1985­10­29T09:03:00Z')\n  //           .expect(200)\n  //           .end((err, res) => {\n  //             expect(err).toBeNull();\n  //             expect(res.body).toEqual(events);\n  //             done();\n  //           });\n  //       });\n  //   });\n  // });\n  //\n  // describe( 'summary events', () => {\n  //   it( 'the events route responds to a POST with a user enters event', (done) => {\n  //     request(app)\n  //       .post('/events')\n  //       .send(userEntersRoom)\n  //       .expect(200)\n  //       .end((err, res) => {\n  //         expect(err).toBeNull();\n  //         expect(res.body).toHaveProperty('status', 'ok');\n  //         done();\n  //       });\n  //   });\n  // });\n\n  // describe( 'clearing events', () => {\n  //   it('clears data in db when posting to events clear route', (done) => {\n  //     request(app)\n  //       .post('/events/clear')\n  //       .expect(200)\n  //       .end((err, res) => {\n  //         expect(err).toBeNull();\n  //         expect(res.body).toHaveProperty('status', 'ok');\n  //         done();\n  //       });\n  //   });\n  // });\n});\n\n"]}