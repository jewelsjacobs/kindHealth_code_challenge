{"version":3,"sources":["events.js"],"names":["Event","require","event","Sequelize","db","Op","_","rawSQLQueury","module","exports","create","req","res","user","type","message","otheruser","date","body","then","status","json","catch","error","send","list","findAll","where","lt","query","to","gt","from","results","response","events","transformedResults","map","result","filteredEvent","id","summary","sequelize","replacements","by","QueryTypes","SELECT","transformedEvents","chain","comments","leaves","highfives","enters","reduce","value","parseInt","push","clear","destroy","truncate"],"mappings":"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","sourcesContent":["/* eslint-disable no-irregular-whitespace */\nconst Event = require('../models').event;\nconst Sequelize = require('sequelize');\nlet db  = require('../models/index');\nconst Op = Sequelize.Op;\nconst _ = require('lodash');\n\nconst rawSQLQueury = `select date_trunc(?, \"date\") as \"date\", \\\ncase when type = 'comment' then count(type) end as \"comments\", \\\ncase when type = 'leave' then count(type) end as \"leaves\", \\\ncase when type = 'highfive' then count(type) end as \"highfives\", \\\ncase when type = 'enter' then count(type) end as \"enters\" \\\nfrom \\\npublic.events \\\nwhere \\\ntype is not null \\\nand \"date\" > date_trunc(?, \\\ntimestamp ?) \\\nand \"date\" < date_trunc(?, \\\ntimestamp ?) \\\ngroup by \"date\", \"type\";`;\n\nmodule.exports = {\n  create(req, res) {\n    const { user, type, message = null, otheruser = null, date } = req.body;\n    return Event\n      .create({ user, type, message, otheruser, date })\n      .then(() => res.status(200).json({status: \"ok\"}))\n      .catch((error) => res.status(400).send(error));\n  },\n\n  list(req, res) {\n    return Event\n      .findAll({\n        where: {\n          date: {\n            [Op.lt]: req.query.to,\n            [Op.gt]: req.query.from\n          }\n        }\n      })\n      .then((results) => {\n        const response = {\n          events: []\n        };\n        const transformedResults = _.map(results, (result) => {\n          const filteredEvent = {};\n          filteredEvent.id = result.id;\n          filteredEvent.date = result.date;\n          filteredEvent.user = result.user;\n          filteredEvent.type = result.type;\n          if (result.message !== null) {\n            filteredEvent.message = result.message;\n          }\n          if (result.otheruser !== null) {\n            filteredEvent.otheruser = result.otheruser;\n          }\n          return filteredEvent;\n        });\n        response.events = transformedResults;\n        res.status(200).json(response);\n      })\n      .catch((error) => res.status(400).send(error));\n  },\n\n  summary(req, res) {\n    return db.sequelize.query(rawSQLQueury,\n      { replacements: [req.query.by, req.query.by, req.query.from, req.query.by, req.query.to], type: db.sequelize.QueryTypes.SELECT }\n    ).then((events) => {\n      const results = {\n        events: []\n      };\n\n      const transformedEvents = _\n        .chain(events)\n        .map((event) => {\n          (event.comments === null) ? event.comments = 0 : event.comments;\n          (event.leaves === null) ? event.leaves = 0 : event.leaves;\n          (event.highfives === null) ? event.highfives = 0 : event.highfives;\n          (event.enters === null) ? event.enters = 0 : event.enters;\n          return event;\n        })\n        .reduce((result, value) => {\n          return {\n            \"date\": result.date,\n            \"comments\": parseInt(value.comments, 10) + parseInt(result.comments, 10),\n            \"leaves\": parseInt(value.leaves) + parseInt(result.leaves),\n            \"highfives\": parseInt(value.highfives, 10) + parseInt(result.highfives, 10),\n            \"enters\": parseInt(value.enters, 10) + parseInt(result.enters, 10)\n          };\n        })\n        .value();\n\n      results.events.push(transformedEvents);\n      res.status(200).json(results);\n    })\n      .catch((error) => res.status(400).send(error));\n  },\n\n  clear(req, res) {\n    return Event\n      .destroy({\n        where: {},\n        truncate: true\n      })\n      .then(() => res.status(200).json({status: \"ok\"}))\n      .catch((error) => res.status(400).send(error));\n  },\n};\n"]}