{"version":3,"sources":["server.spec.js"],"names":["request","require","app","Event","event","Sequelize","Op","userEntersRoom","userCommentsInARoom","userHighFivesAnotherUser","userLeavesRoom","describe","it","done","post","send","expect","end","err","res","toBeNull","body","toHaveProperty","findAll","where","date","lt","gt","then","events","get","toEqual"],"mappings":"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","sourcesContent":["const request = require('supertest');\nconst app = require ('../app');\nconst Event = require('../server/models').event;\nconst Sequelize = require('sequelize');\nconst Op = Sequelize.Op;\n\n/*\nSupported POST bodies\n*/\nconst userEntersRoom = {\"date\": \"1985­10­26T09:00:00Z\", \"user\": \"Doc\", \"type\": \"enter\"};\n\nconst userCommentsInARoom = {\"date\": \"1985­10­27T09:01:00Z\", \"user\": \"Doc\", \"type\": \"comment\", \"message\": \"I love plutonium\"};\n\nconst userHighFivesAnotherUser = {\"date\": \"1985­10­28T09:02:00Z\", \"user\": \"Marty\", \"type\": \"highfive\", \"otheruser\": \"Doc\"};\n\nconst userLeavesRoom = {\"date\": \"1985­10­29T09:03:00Z\", \"user\": \"Doc\", \"type\": \"leave\"};\n\ndescribe('Events API', () => {\n  describe( 'creating events', () => {\n    it( 'the events route responds to a POST with a user enters event', (done) => {\n      request(app)\n      .post('/events')\n      .send(userEntersRoom)\n      .expect(200)\n      .end((err, res) => {\n        expect(err).toBeNull();\n        expect(res.body).toHaveProperty('status', 'ok');\n        done();\n      });\n    });\n    it( 'the events route responds to a POST with a user comments event', (done) => {\n      request(app)\n        .post('/events')\n        .send(userCommentsInARoom)\n        .expect(200)\n        .end((err, res) => {\n          expect(err).toBeNull();\n          expect(res.body).toHaveProperty('status', 'ok');\n          done();\n        });\n    });\n    it( 'the events route responds to a POST with a user high five event', (done) => {\n      request(app)\n        .post('/events')\n        .send(userHighFivesAnotherUser)\n        .expect(200)\n        .end((err, res) => {\n          expect(err).toBeNull();\n          expect(res.body).toHaveProperty('status', 'ok');\n          done();\n        });\n    });\n    it( 'the events route responds to a POST with a user leaves event', (done) => {\n      request(app)\n        .post('/events')\n        .send(userLeavesRoom)\n        .expect(200)\n        .end((err, res) => {\n          expect(err).toBeNull();\n          expect(res.body).toHaveProperty('status', 'ok');\n          done();\n        });\n    });\n  });\n\n  describe( 'listing events', () => {\n    it( 'the events route will get a listing of events', (done) => {\n      Event\n        .findAll({\n          where: {\n            date: {\n              [Op.lt]: '1985­10­26T09:00:00Z',\n              [Op.gt]: '1985­10­29T09:03:00Z'\n            }\n          }\n        })\n        .then((events) => {\n          request(app)\n            .get('/events')\n            .send('from=1985­10­26T09:00:00Z&to=1985­10­29T09:03:00Z')\n            .expect(200)\n            .end((err, res) => {\n              expect(err).toBeNull();\n              expect(res.body).toEqual(events);\n              done();\n            });\n        })\n    });\n  });\n\n  describe( 'summary events', () => {\n    it( 'the events route responds to a POST with a user enters event', (done) => {\n      request(app)\n        .post('/events')\n        .send(userEntersRoom)\n        .expect(200)\n        .end((err, res) => {\n          expect(err).toBeNull();\n          expect(res.body).toHaveProperty('status', 'ok');\n          done();\n        });\n    });\n  });\n\n  describe( 'clearing events', () => {\n    it('clears data in db when posting to events clear route', (done) => {\n      request(app)\n      .post('/events/clear')\n      .expect(200)\n      .end((err, res) => {\n        expect(err).toBeNull();\n        expect(res.body).toHaveProperty('status', 'ok');\n        done();\n      });\n    });\n  });\n});\n\n"]}